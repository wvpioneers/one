{"version":3,"sources":["sortDiv.js","App.js","serviceWorker.js","index.js"],"names":["SortDiv","wrapstyle","style1","style2","style3","style4","Wrapper","Div1","Div2","Div3","Div4","styled","div","Home","useState","wrapper","setWrapper","div1","setDiv1","div2","setDiv2","div3","setDiv3","div4","setDiv4","All","MyForm2","Head","onClick","Rap","Header","T1","T2","T3","T4","T5","Rap2","Header2","MyFormGrid","style","display","flexDirection","fontWeight","color","gridRow","gridColumn","marginRight","border","padding","paddingLeft","justifySelf","Textarea","spellCheck","type","value","onChange","e","target","RapStyle","textarea","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a844b36a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styled from 'styled-components'\r\n\r\n\r\nexport default function SortDiv({\r\n  wrapstyle,\r\n  style1,\r\n  style2,\r\n  style3,\r\n  style4\r\n}) {\r\n\r\n  return (<>wrapper\r\n    <Wrapper wrapstyle={wrapstyle}>\r\n      <Div1 style1={style1}>Div 1</Div1>\r\n      <Div2 style2={style2}>Div 2</Div2>\r\n      <Div3 style3={style3}>Div 3</Div3>\r\n      <Div4 style4={style4}>Div 4</Div4>\r\n    </Wrapper>\r\n  </>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  ${({ wrapstyle }) => wrapstyle}\r\n`;\r\n\r\nconst Div1 = styled.div`\r\n  ${({ style1 }) => style1}\r\n`;\r\n\r\nconst Div2 = styled.div`\r\n  ${({ style2 }) => style2}\r\n\r\n`;\r\n\r\nconst Div3 = styled.div`\r\n  ${({ style3 }) => style3}\r\n\r\n`;\r\n\r\nconst Div4 = styled.div`\r\n  ${({ style4 }) => style4}\r\n`;\r\n","import React, { useState } from \"react\"\nimport styled from 'styled-components';\nimport SortDiv from \"./sortDiv\";\n\nexport default function Home() {\n\n  const [fieldOne, setFieldOne] = useState();\n  const [fieldTwo, setFieldTwo] = useState();\n  const [fieldThree, setFieldThree] = useState();\n  const [fieldFour, setFieldFour] = useState();\n\n  function clickOne(e) {\n    e.preventDefault();\n    setFieldThree(hexToRGB(\"#\" + fieldOne));\n    setFieldFour(nameToHex(fieldTwo));\n  }\n\n\n  function hexToRGB(h) {\n    let r = 0, g = 0, b = 0;\n\n    // 3 digits\n    if (h.length == 4) {\n      r = \"0x\" + h[1] + h[1];\n      g = \"0x\" + h[2] + h[2];\n      b = \"0x\" + h[3] + h[3];\n\n      // 6 digits\n    } else if (h.length == 7) {\n      r = \"0x\" + h[1] + h[2];\n      g = \"0x\" + h[3] + h[4];\n      b = \"0x\" + h[5] + h[6];\n    }\n\n    return \"rgb(\" + +r + \",\" + +g + \",\" + +b + \")\";\n  }\n\n  function nameToHex(name) {\n    // Get RGB from named color in temporary div\n    let fakeDiv = document.createElement(\"div\");\n    fakeDiv.style.color = name;\n    document.body.appendChild(fakeDiv);\n\n    let cs = window.getComputedStyle(fakeDiv),\n      pv = cs.getPropertyValue(\"color\");\n\n    document.body.removeChild(fakeDiv);\n\n    // Code ripped from RGBToHex() (except pv is substringed)\n    let rgb = pv.substr(4).split(\")\")[0].split(\",\"),\n      r = (+rgb[0]).toString(16),\n      g = (+rgb[1]).toString(16),\n      b = (+rgb[2]).toString(16);\n\n    if (r.length == 1)\n      r = \"0\" + r;\n    if (g.length == 1)\n      g = \"0\" + g;\n    if (b.length == 1)\n      b = \"0\" + b;\n\n    return \"#\" + r + g + b;\n  }\n\n\n  const [wrapper, setWrapper] = useState(\"display: grid; grid-template-columns: 1fr 1fr 1fr;\");\n  const [div1, setDiv1] = useState();\n  const [div2, setDiv2] = useState();\n  const [div3, setDiv3] = useState();\n  const [div4, setDiv4] = useState();\n\n  function clearAll() {\n    setWrapper('');\n    setDiv1('');\n    setDiv2('');\n    setDiv3('');\n    setDiv4('');\n  }\n\n  return (<All>\n    {/* <div>OUTPUT: {fieldThree}, {fieldFour}</div> */}\n    {/* <label>Set font color\n     <input type=\"text\" value={fieldOne} name={\"first\"} onChange={e => setFieldOne(e.target.value)} />\n    </label> */}\n    {/* <MyForm>\n      <Label>#\n      <input type=\"text\" value={fieldOne} name={\"first\"} onChange={e => setFieldOne(e.target.value)} />\n      </Label>\n      <Label>color name\n      <input type=\"text\" value={fieldTwo} name={\"second\"} onChange={e => setFieldTwo(e.target.value)} />\n      </Label>\n      <div>\n        <button type=\"submit\" onKeyPress={clickOne} onClick={clickOne}>Submit</button>\n      </div>\n    </MyForm> */}\n    <MyForm2>\n      <Head>Make B look like A\n         <div>\n          <button onClick={clearAll}>Start Over</button>\n        </div>\n      </Head>\n\n      <Rap>\n        <Header>A</Header>\n        wrapper\n          <T1>\n          <T2>Div 1</T2>\n          <T3>Div 2</T3>\n          <T4>Div 3</T4>\n          <T5>Div 4</T5>\n        </T1>\n      </Rap>\n    </MyForm2>\n    <Rap2>\n      <Header2>B</Header2>\n      <SortDiv\n        wrapstyle={wrapper}\n        style1={div1}\n        style2={div2}\n        style3={div3}\n        style4={div4}\n      />\n    </Rap2>\n\n    <MyFormGrid>\n      <div style={{ display: \"flex\", flexDirection: \"column\", fontWeight: \"400\", color: \"gray\", gridRow: \"1 / span 6\", gridColumn: \"1 / span 1\", marginRight: \"30px\" }}>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\", }}>\n          <div>&#60;div&#62;</div>\n          <div style={{ paddingLeft: \"10px\" }}>wrapper</div>\n          <div style={{ paddingLeft: \"20px\" }}>&#60;div <b style={{ color: \"red\" }}>class=S-Wrapper</b> &#62;</div>\n          <div style={{ paddingLeft: \"30px\" }}>&#60;div <b style={{ color: \"red\" }}>class=S-Div1</b> &#62;Div 1&#60;/div&#62;</div>\n          <div style={{ paddingLeft: \"30px\" }}>&#60;div <b style={{ color: \"red\" }}>class=S-Div2</b> &#62;Div 2&#60;/div&#62;</div>\n          <div style={{ paddingLeft: \"30px\" }}>&#60;div <b style={{ color: \"red\" }}>class=S-Div3</b> &#62;Div 3&#60;/div&#62;</div>\n          <div style={{ paddingLeft: \"30px\" }}>&#60;div <b style={{ color: \"red\" }}>class=S-Div4</b> &#62;Div 4&#60;/div&#62;</div>\n          <div style={{ paddingLeft: \"20px\" }}>&#60;/div&#62;</div>\n          <div style={{ paddingLeft: \"10px\" }}>&#60;/div&#62;</div>\n        </div>\n      </div>\n      <div style={{ justifySelf: \"flex-end\", color: \"red\" }}>S-Wrapper</div>\n      <Textarea spellCheck={false} type=\"text\" value={wrapper} onChange={e => setWrapper(e.target.value)} />\n      <div style={{ justifySelf: \"flex-end\", color: \"red\" }}>S-Div1</div>\n      <Textarea spellCheck={false} type=\"text\" value={div1} onChange={e => setDiv1(e.target.value)} />\n      <div style={{ justifySelf: \"flex-end\", color: \"red\" }}>Div 2</div>\n      <Textarea spellCheck={false} type=\"text\" value={div2} onChange={e => setDiv2(e.target.value)} />\n      <div style={{ justifySelf: \"flex-end\", color: \"red\" }}>Div 3</div>\n      <Textarea spellCheck={false} type=\"text\" value={div3} onChange={e => setDiv3(e.target.value)} />\n      <div style={{ justifySelf: \"flex-end\", color: \"red\" }}>Div 4</div>\n      <Textarea spellCheck={false} type=\"text\" value={div4} onChange={e => setDiv4(e.target.value)} />\n    </MyFormGrid>\n  </All>\n  )\n}\n\nconst All = styled.div`\nwidth: min(100%, 1200px);\nmargin: 0 auto;\n`;\n\nconst RapStyle = styled.div`\n  position: relative;\n  height: auto;\n  padding: 30px;\nbox-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0,0,0,.12);\n    border-width: 1px;\n    border-style: solid;\n    border-color: #e0e0e0;\n    background-color: white;\nborder-radius: 10px;\n`;\n\nconst Rap = styled(RapStyle)`\n\n`;\n\nconst Rap2 = styled(RapStyle)`\n\n`;\n\nconst Header = styled.div`\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  font-family: work sans, san-serif;\n  font-size: 30px;\n  font-weight: 600;\n  color: purple;\n`;\n\nconst Header2 = styled.div`\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  font-family: work sans, san-serif;\n  font-size: 30px;\n  font-weight: 600;\n  color: #a91009;\n`;\nconst Textarea = styled.textarea`\n  height: 50px;\n  width: 500px;\n`;\nconst MyFormGrid = styled.div`\n  display: grid;\n  grid-template-columns: auto 100px 1fr;\n  grid-gap: 10px;\n  padding: 20px;\n`;\n\nconst Head = styled.div`\n  // font-family: Work Sans, san-serif;\n  // font-weight: 600;\n  // color: blue;\n  // margin-bottom: 20px;\n      margin-left: 0;\n    margin-right: 0;\n    margin-top: 0;\n    padding-bottom: 0;\n    padding-left: 0;\n    padding-right: 0;\n    padding-top: 0;\n    margin-bottom: 1.5rem;\n    color: black;\n    font-family: 'Futura PT',-apple-system,'BlinkMacSystemFont','Segoe UI','Roboto','Helvetica Neue','Arial','Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';\n    font-weight: bold;\n    text-rendering: optimizeLegibility;\n    font-size: 2rem;\n    line-height: 1.25;\n`;\nconst T1 = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  grid-gap: 10px;\n  background-color: gray;\n  padding: 10px;\n  border-radius: 10px;\n`;\n\nconst T2 = styled.div`\ngrid-column: 3 / span 1;\ngrid-row: 1 / span 2;\nborder: 1px solid white;\npadding: 10px;\nborder-radius:50%;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n`;\nconst T3 = styled.div`\ngrid-column: 1 / span 1;\nborder: 1px solid white;\npadding: 10px;\n`;\nconst T4 = styled.div`\ngrid-column: 2 / span 1;\nborder: 1px solid white;\npadding: 10px;\n`;\nconst T5 = styled.div`\ngrid-column: 1 / span 2;\nborder: 1px solid white;\npadding: 10px;\n`;\n\nconst Label = styled.label`\ndisplay: flex;\nalign-items: baseline;\nmargin-bottom: 40px;\n& input {\n  margin-left: 10px;  \n}\n& textarea {\n  height: 80px;\n  width: 500px;\n\n}\n`;\n\nconst MyForm = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MyForm2 = styled.div`\nmargin: 20px 0;\n  display: flex;\n  flex-direction: column;\n`;\n\n\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}